{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PPUC, PPUC/DMD and ZeDMD","text":"<p>The Pinball Power-Up Controller software and hardware family is designed to enhance the capabilities of classic pinball machines, mainly of the 80s and 90s, to repair broken machines and to drive the hardware of home brew pinball machines.</p> <p> Click the image to watch the video on YouTube.</p> <p>Meanwhile the PPUC family has grown and the hard and software covers various use-cases, like modding a pinball machine, repairing a pinball machine or to drive homebrew pinball machines.</p> <p>The first PPU Controller was designed to enhance existing machines. It is able to monitor all playfield switches, lights, and solenoids and to trigger and distribute corresponding events to attached sub-systems. It is possible to monitor DMD and sound commands, too.</p> <p>Sub-system like the built-in EffectController are able to drive additional LEDs, motors, and coils. Other sub-systems could be video players or audio systems. The additional effects are bundled per pinball machine in so-called Pinball Power-Ups (PPUs).</p> <p>For homebrew machines there will be additional software to act as \"CPU\", running the game logic aka rules and communicating with the controllers. The target is to use the VPX Standalone script engine and the VPX Standalone ecosytem.</p> <p>A special variation of that \"CPU\" is suitable as replacement for a broken CPU of an existing machine. That development started as part of the PinMAME project. Nowadays it is a standalone programm that leverages libpinmame: https://github.com/PPUC/ppuc</p> <p>As a sub-project ZeDMD has been created to emulate a real DMD for virtual pinball machines and to be used with as replacement in real machines.</p> <p>To get involved in the development or to discuss your PPUC project, join us on Discord.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>We want to enable people to be creative and to modernize old pinball machines using today's technology. Or to get an old broken machine back to work. Our goal is to establish an open and affordable platform for that.</p> <p>Ideally people will publish their game-specific PPUs so others could leverage and potentially improve them. We want to see a growing library of PPUs and a vital homebrew pinball community.</p>"},{"location":"#concept","title":"Concept","text":""},{"location":"#enhancing-modding-an-existing-machine","title":"Enhancing / Modding an existing machine","text":"<p>The Pinball Power-Up Controllers consist of multiple micro controllers to perform several tasks in parallel. The entire system is modular, so you can choose what you really need. The basic setup consists of a controller to capture a pinball's events and another independent one to run effects.</p> <p>We will provide several integrated boards and vendor specific adaptor boards (currently in development: Williams WPC, Data East, Stern SAM and Whitestar).</p> <p>The Effect Controller should be able to drive hundreds (or thousands?) of LEDs, PWM devices, ... in parallel in a non-blocking way.</p> <p> Click the images to watch the videos on YouTube.</p>"},{"location":"#homebrew-machines-or-replacing-a-cpu-and-drivers","title":"Homebrew machines or Replacing a CPU (and drivers)","text":"<p>Still WIP, but the hardware and io-boards firmware gets better and better ;-)</p> <p>A PPUC board can control solonoids, flashers, motors, etc. They could read dedicated switches or a switch matrix. Lamps could als be controlled as dedidicated bulbs or LEDs, as light matrix or as addressable RGB(W) LEDs including after glow effects.</p> <p>Multipe boards can be cascaded to to have enough input and output ports. The communication happens via a BUS and the protocol enhances the DOF protocol which is known from the virtual pinball world.</p> <p> </p> <p>In case of replacing a broken CPU and driver boards, the platform independent PPUC command line tool can run on any old or small computer like a Raspberry Pi and leverages libpinmame to emulate the ROM.</p> <p> Click the image to watch the video on YouTube.</p> <p>It you replace the entire electronics and wiring of an existing machine, a web-based configuration tool could be used to configure your setup.</p> <p>In case of a homebrew machine, the intention is that you design and devolep your pinball machine using VPX. Our plan is to create a special version of VPX Standalone (VPX for Linux, macOS, iOS, Android) to operate the machine. You would have all capabilities like PUP Packs, FlexDMD, etc.</p> <p> Click the image to watch the video on YouTube.</p> <p></p>"},{"location":"#licence","title":"Licence","text":"<p>The code is licenced under GPLv3. Be aware of the fact that your own Pinball Power-Ups (PPUs) need to be licenced under a compatible licence. That doesn't prevent any commercial use, but you need to respect the terms and conditions of GPLv3!</p> <p>We would appreciate contributions to PPUC itself or as game-specific PPUs.</p>"},{"location":"#zedmd","title":"ZeDMD","text":"<p>ZeDMD is a \"real\" DMD for pinball emulations and other use cases, developed as part of the PPUC project. For more details, visit the ZeDMD page.</p> <p> Click the image to watch the video on YouTube.</p>"},{"location":"#ppucdmd","title":"PPUC/DMD","text":"<p>PPUC/DMD is a replacement DMD for real pinball machines that is able to aply Serum v1 and v1 colorizations. It uses a ZeDMD for rendering.</p> <p> Click the image to watch the video on YouTube.</p>"},{"location":"#other-components-of-the-ppuc-project","title":"Other components of the PPUC project","text":"<p>To reach our goals, we contribute to other projects like VPX Standalone, batocera, libdmdutil, libserum etc. Some libraries and sub-projects that are also leveraged by others are hosted as PPUC projects:</p> <ul> <li>libzedmd</li> <li>libpupdmd</li> <li>libframeutil</li> <li>libserum (concentrate)</li> </ul> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"github_repos/","title":"GitHub Repositories","text":""},{"location":"github_repos/#ppuc-repositories","title":"PPUC Repositories","text":"config-tool <p>Web-based configuration and management tool for Pinball Power-Up Controller</p> Latest Release: v0.1.2 (May 13, 2025) dmdreader <p>Firmware for a RP2040 based DMD signal reader</p> \u2b50 1 \u2442 0 Latest Release: v0.2.0 (Apr 10, 2025) Hardware_IO_16_8_1 <p>Hardware for the generic I/O Board for PPUC</p> \u2b50 4 \u2442 0 Latest Release: V1.1.1 (Nov 16, 2024) Hardware_IO_16x8_matrix <p>Hardware for a Switch Matrix Board for PPUC </p> No releases yet Hardware_Opto_16 <p>Hardware for an Opto Board for PPUC</p> No releases yet Hardware_Out_8x10 <p>Hardware for Lamp Matrix Board for PPUC </p> No releases yet io-boards <p>PPUC I/O Boards Firmware</p> \u2b50 1 \u2442 2 Latest Release: v0.1.0 (May 01, 2025) libdmdcommon <p>Common functions for different DMDs</p> No releases yet libframeutil <p>Some DMD frame utilities used by libzedmd and libdmdutil</p> No releases yet libppuc <p>Cross-platform library for communicating with PPUC i/o boards</p> No releases yet libpupdmd <p>Emit PUP triggers from DMD frames</p> \u2b50 0 \u2442 1 No releases yet libserum_concentrate <p>Special version of libserum that requires significantly less memory</p> \u2b50 1 \u2442 1 Latest Release: v2.2.0-concentrate.5 (Jun 10, 2025) libzedmd <p>ZeDMD communication library</p> \u2b50 7 \u2442 4 Latest Release: v0.9.6 (Feb 23, 2025) libzedmd-python-pybind11-extension <p>Project created to use libzedmd with python (using pybind11)</p> Latest Release: V1.1.1 (Apr 02, 2025) MPF-pinball-ZeDMD-demo <p>Basicest example of MPF pinball with a ZeDMD</p> No releases yet PPU-TZ <p>Pinball Power-Up for Twilight Zone</p> No releases yet ppuc <p>The PPUC \"binary\" that acts as CPU</p> \u2b50 1 \u2442 1 No releases yet SortingCDump <p>No description</p> No releases yet ZeDMD <p>A real DMD for virtual pinball machines and PPUC driven real pinball machines</p> \u2b50 41 \u2442 11 Latest Release: v5.1.7 (Feb 23, 2025) zedmdos <p>Raspberry Pi OS for ZeDMD</p> \u2b50 6 \u2442 1 Latest Release: 1.0-dev (May 31, 2024)"},{"location":"github_repos/#forked-repositories-with-adjustments-for-ppuc","title":"Forked Repositories with adjustments for PPUC","text":"<p>We always try to get the adjustmens merged into the upstream repositories. But to ease the installtions, we sometimes provide preview builds.</p> dmd-extensions <p>A toolbox for virtual pinball dot matrix displays.</p> \u2b50 1 \u2442 0 Fork Latest Release: v2.3.1-zedmd.beta.4 (Feb 03, 2025) libdmdutil <p>A cross platform library for performing DMD tasks.</p> No releases yet pinmame <p>Incubator for PPUC related PinMAME enhancements</p> No releases yet <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"about/help/","title":"First timer's guide to editing PPUC documentation","text":"<p>Hey! You found something that is not documented yet, or that needs to be updated. What a great opportunity to help us improve the documentation!</p> <p>It can sound scary to contribute to the documentation, but it's pretty easy, AND you can feel good that you're \"giving back\" to the PPUC project and the larger pinball maker community.</p> <p>Also, whenever you make a change and submit it, the maintainers of PPUC will review it before it goes live. So you can't accidentally delete the entire site or anything like that. :) Also, you'll have a chance to continue to update and edit your changes before they go live. So there's no reason to be afraid to contribute!</p> <p>We have a whole guide to get you started: How to contribute to PPUC Docs.</p> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"about/help_docs/","title":"Contributing to PPUC's Documentation","text":"<p>Want to help make these docs better! Great! We'd love any help, whether it's as small as correcting a typo, adding to a section that isn't clear, adding your own How To guide, or whatever else you want to change.</p>"},{"location":"about/help_docs/#how-this-website-works","title":"How this website works","text":"<p>There's a GitHub repository called PPUC/docs which contains the source code for this website. It's a Material for MkDocs site. Every time a change is made to that repository, a GitHub action runs that builds the site and deploys it to GitHub pages.</p> <p>Making a change (whether it's a simple typo or a major overhaul)</p>"},{"location":"about/help_docs/#to-make-a-quick-change-to-an-existing-page","title":"To make a quick change to an existing page","text":"<p>Quick changes to existing pages can be done right on the web!</p> <p>To do that:</p> <ol> <li>Browse to the page you want to update, and click sparkly magic     wand icon to the right of the page headline. That will link you     to that page in the GitHub repo on GitHub.com.</li> <li>Login to GitHub. (And create an account if you don't have one!)</li> <li>Click the pencil icon in the upper-right corner of the page's text.     This will create a fork of <code>PPUC/doc</code> in your     GitHub account.</li> <li>Make your change, and click the \"Propose file change\". This will     create a pull request. Type a name describing your change, and click     \"Create pull request\".</li> <li>Details and screen shots of this entire process are     here.</li> </ol>"},{"location":"about/help_docs/#to-make-a-suggestion-for-a-new-doc-or-to-point-out-an-error","title":"To make a suggestion for a new doc (or to point out an error)","text":"<p>Even if you don't feel comfortable actually changing or editing docs, you can still tell us about an error in the documentation or suggest new documentation that we should add. To do this:</p> <ol> <li>Go to the \"Issues\" page of the <code>PPUC/docs</code> repository on     GitHub.</li> <li>Create a GitHub account if you don't have one, and/or login.</li> <li>Click the \"New Issue\" button and describe what you'd like us to     fix or add!</li> </ol>"},{"location":"about/help_docs/#how-do-these-docs-work","title":"How do these docs work?","text":"<ul> <li>This website is built using MkDocs, which   is a static site generator for building project documentation.</li> <li>It uses the Material for MkDocs   theme, which is a Material Design theme for MkDocs. 99% of your reading about   how this site works will be here.</li> <li>The navigation structure is completely defined in the   <code>mkdocs.yml</code>. So if you add a page, or want to change the order of   anything, you'll need to edit that file too.</li> </ul>"},{"location":"about/help_docs/#to-clone-the-ppucdocs-repo-locally-to-make-bigger-changes","title":"To clone the PPUC/docs repo locally to make bigger changes","text":"<p>If you want to make bigger changes to the docs, or if you want to download the <code>PPUC/docs</code> repo so you can work on it offline, do the following:</p> <ol> <li>Clone the <code>PPUC/docs</code> repo from GitHub.</li> <li>Install the requirements for the site, by running the following in the root of the repo: <code>pip3 install -r requirements.txt</code></li> <li>Use <code>mkdocs serve</code> to build the site and serve it locally. (You can then browse to <code>http://localhost:8000</code> to view the site.)</li> <li>Makes your changes.</li> <li>Submit your pull     request</li> </ol> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"images/icons/","title":"Your Favicon Package","text":"<p>This package was generated with RealFaviconGenerator</p> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"ppuc/","title":"PPUC","text":"<p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"ppuc/build_from_source/","title":"Build from Source","text":"<p>To build the PPUC executable you need to compile the source files:</p> <ol> <li>Install the compiler and some helper tools for automation of the build process.</li> <li>Get the target dependent header files for the system libraries used by PPUC.</li> <li>Run the appropiate build.sh (located in the platforms dir).</li> </ol>"},{"location":"ppuc/build_from_source/#linux","title":"Linux","text":"<p>You can build for an ARM CPU (aarch64) or AMD/Intel CPU (x64) depending on the CPU of the target computer you want to use for PPUC. It does not really matter which Linux distro is used.</p> <p>The easiest way to compile is on a Linux computer. This guide is tested with Ubuntu and Debian. Both use the Advanced Package Tool (APT). On a Windows PC, you can use VirtualBox.</p> <p>It is advised to update the list of packages, upgrade installed packages and cleanup first:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade\nsudo apt-get autoremove\n</code></pre>"},{"location":"ppuc/build_from_source/#sudo","title":"sudo","text":"<p>The \"super user do\" command allows you to execute commands with administrative privileges. Normal users do not have these in order to keep the system safe. But 'sudo' may not work if you are not in the sudo group. In that case use the following to add yourself:</p> <pre><code>usermod -aG sudo $USER\n</code></pre>"},{"location":"ppuc/build_from_source/#compiler","title":"Compiler","text":"<p>Install the compiler : <pre><code>sudo apt-get install build-essential\n</code></pre></p> <p>Install the tools used by build.sh: <pre><code>sudo apt install git cmake curl autoconf automake libtool pkg-config zlib1g zlib1g-dev\n</code></pre></p>"},{"location":"ppuc/build_from_source/#header-files","title":"Header files","text":"<p>Install the header files to be used by the compiler: <pre><code>sudo apt install libudev-dev libasound2-dev libpulse-dev libaudio-dev libjack-dev \nsudo apt install libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev\nsudo apt install libxfixes-dev libxi-dev libxss-dev libxtst-dev libxkbcommon-dev\nsudo apt install libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev\nsudo apt install libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev\nsudo apt install libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev\n</code></pre></p>"},{"location":"ppuc/build_from_source/#build","title":"Build","text":"<p>Get the source files: <pre><code>mkdir $HOME/projects\ncd $HOME/projects\ngit clone https://github.com/PPUC/ppuc.git\n</code></pre></p>"},{"location":"ppuc/build_from_source/#compile-pc","title":"Compile (PC):","text":"<pre><code>cd ppuc\nplatforms/linux/x64/build.sh\n</code></pre>"},{"location":"ppuc/build_from_source/#compile-raspberry-pi","title":"Compile (Raspberry Pi):","text":"<pre><code>cd ppuc\nplatforms/linux/aarch64/build.sh\n</code></pre>"},{"location":"ppuc/build_from_source/#test","title":"Test","text":"<p>Use the example/t2.yml to try:</p> <ul> <li>Download the ROM for Terminator 2 Judgement Day (L-8): t2_l8.zip</li> <li>Create a directory for pinmame: $HOME/.pinmame</li> <li>Create a subdirectory: $HOME/.pinmame/roms</li> <li>Copy t2_l8.zip to roms</li> </ul> <p>Run from the ppcu directory (where you called build.sh): <pre><code>ppuc/ppuc-pinmame -c examples/t2.yml -n -i\n</code></pre> This should run PPUC without RS484 communication. Exit with CTRL-C.</p> <p>To see all commandline options: <pre><code>ppuc/ppuc_pinmame --help\n</code></pre></p> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"ppuc/config_tool/","title":"Config Tool","text":""},{"location":"ppuc/config_tool/#function","title":"Function","text":"<p>The Config Tool is needed to appropriately map the IO-Board inputs and outputs to a ROM in PinMame. The numbers of the inputs and outputs from PinMame are assigned to the inputs and outputs of the IO-Board firmware in the config file. In PinMame, original pinball ROM circuits are emulated. PPUC-Pinmame outputs the events of the circuit and accepts inputs for the emulated ROM. Without a config file, PPUC-Pinmame cannot communicate with the boards.</p>"},{"location":"ppuc/config_tool/#config-file","title":"Config File","text":"<p>The Config Tool outputs a config file as a result. This file has the extension \".yml\". The goal of your work, besides collecting pinball data, is primarily the generation of this file.</p> <p>The YAML format used is very common for configuration files as it is a quasi-standard and easily readable by humans. In YAML, indentation determines which elements belong together and form a group. It is advisable not to edit this file manually, because a line break, a separator, or a space can easily be deleted, moved, or added, making the file unreadable. Caution! Do not modify the file manually.</p>"},{"location":"ppuc/config_tool/#components-of-a-configuration","title":"Components of a Configuration","text":"<p>A configuration file for PPUC-PinMame consists of the following element groups:</p> <ul> <li>Game</li> <li>Boards</li> <li>DIP Switches</li> <li>Switches</li> <li>LED Stripes<ul> <li>Lamps</li> <li>Flashers</li> <li>GI (Global Illumination)</li> </ul> </li> <li>LEDs</li> <li>PWM-Outputs (Pulse Wide Modulation)</li> <li>Mechs</li> </ul> <p>These are the important elements needed for the connection between Pinmame and IO-Boards. Additionally, all information about the pinball machine can be collected and archived in the configuration tool. This includes:</p> <ul> <li>Description</li> <li>Images (png, gif, jpg, jpeg, webp)</li> <li>ROM</li> <li>Manual</li> <li>Lamp Position Plan</li> <li>Switch Position Plan</li> <li>Solenoid Position Plan</li> </ul>"},{"location":"ppuc/config_tool/#first-steps","title":"First Steps","text":""},{"location":"ppuc/config_tool/#important-before-we-begin","title":"Important before we begin","text":"<p>Pinball machines usually have protective functions. Sometimes they are real switches, sometimes switching states in the machine's circuit. If you're building a playfield from scratch, or just want to try out part of the pinball machine, PinMame might not work as expected because you haven't created these states. Conditions are:</p> <ul> <li>Game On Solenoid</li> <li>Coin Door Closed Switch</li> </ul> <p>PinMame uses the inputs of the original ROMs. Therefore, they are manufacturer-specific. E.g., Game On Solenoid: Williams System 3 - 11: 23 Williams WPC: 31 Data East: 23 Sega: 15 Gottlieb System 1: 17 Gottlieb System 80: 10 Gottlieb System 3: 32 Note: Also think about other switches that must be closed before a game starts. For example, whether a ball is in the ball trough. Possibly also whether enough balls are in the ball trough (switch at the last ball).</p>"},{"location":"ppuc/config_tool/#installation-and-launch-of-the-config-tool","title":"Installation and Launch of the Config Tool","text":"<p>Installation instructions</p> <p>..</p>"},{"location":"ppuc/config_tool/#interface","title":"Interface","text":""},{"location":"ppuc/config_tool/#home","title":"Home","text":""},{"location":"ppuc/config_tool/#view","title":"View","text":"<p>Summary of the Game elements.</p>"},{"location":"ppuc/config_tool/#edit","title":"Edit","text":"<p>Edit the inputs that were requested when creating the game. (Title, Description, Platform, Images, ROM, etc.)</p>"},{"location":"ppuc/config_tool/#export","title":"Export","text":"<p>Save directly when clicking on Export. This saves the game completely. This file can be used to create backup copies of all inputs for the currently opened game. The save is placed in the browser's download folder.</p>"},{"location":"ppuc/config_tool/#download-game-config","title":"Download Game Config","text":"<p>Save directly when clicking on Download Game Config. This saves the config file for use in PPUC-PinMame. The save is placed in the browser's download folder.</p>"},{"location":"ppuc/config_tool/#delete","title":"Delete","text":"<p>CAUTION: After confirmation, the currently opened element will be irrevocably deleted. The currently opened element (Game, LED-Stripe, LED, PWM-Device, Board, etc.) is deleted via this button. If you are in the game interface without having selected an element, the game will be deleted. Note when deleting a game: Only the game configuration is deleted. All associated boards, LED-Stripes, etc. remain. These will still be available for selection in the settings. If you want to delete the elements of a game, it's best to delete the subordinate elements first!</p>"},{"location":"ppuc/config_tool/#revision","title":"Revision","text":"<p>PPUC-Config Tool will make different versions of the game available in the future.</p>"},{"location":"ppuc/config_tool/#clone","title":"Clone","text":"<p>Elements such as Boards, LED-Strings, LEDs, etc. can be cloned using this button. This means that the element is cloned with the last saved inputs. You can recognize this by the extended title \"Clone\".</p>"},{"location":"ppuc/config_tool/#creating-a-game","title":"Creating a Game","text":"<p>A new game is created by pressing the \"+ Add Game\" button.</p> <p></p> <p>Now fill in the fields. Required fields are marked with asterisks (). *Don't forget** that your game may not start if you haven't defined Game On Solenoid and Coin Door Closed Switch.</p> <p>Another important feature is the Platform.</p> <p></p> <p>The manufacturers of pinball machines developed their systems over time and designed different platforms. The characteristics of the platforms are taken into account through the appropriate selection. There is not yet a separate selection for all platforms. DE = DataEast, SYS11 and SYS4</p> <p>Save the data - You will receive confirmation that your game has been created.</p> <p></p> <p>You will automatically switch to the editor interface of the game.</p>"},{"location":"ppuc/config_tool/#adding-an-io-board","title":"Adding an IO-Board","text":"<ul> <li>Title: Choose a unique title that helps you identify the board.</li> <li>Game: Select the game you created earlier.</li> <li>Number: Enter the number of the I/O Board that you have set on the DIP switch on the board. The number can be set from 0 to 16. It is the address that tells the board it needs to respond to the data communication. </li> <li>Type: Also select the board type here.</li> <li>Note: The board, like other elements, can be assigned to multiple games. This might be important for you later when naming the board to recognize the boards.</li> </ul> <p>Save - don't forget.</p>"},{"location":"ppuc/config_tool/#inputs-and-outputs","title":"Inputs and Outputs","text":"<p>Microcontrollers whose I/O pins are routed outward are located on the boards. These I/O pins are used, among other things, for communication with each other and with the device running PinMame (RS485). The inputs and outputs are used to forward inputs from the pinball device to PinMame and to forward outputs from PinMame to the boards. The structure of the elements is hierarchical. For example, LED-Strings and PWM-Devices are assigned directly to the boards. Lamps, Flashers, and GI, however, are assigned to the LED-String.</p> <p>Hierarchy:</p> <ul> <li>Game<ul> <li>Board<ul> <li>DipSwitch</li> <li>Switch</li> <li>Switch Matrix<ul> <li>Matrix Column</li> <li>Matrix Row</li> </ul> </li> <li>LED String<ul> <li>Lamps</li> <li>Flashers</li> <li>GI</li> </ul> </li> <li>PWM Device</li> </ul> </li> </ul> </li> </ul> <p>After you have created a game and a board, now add the elements.</p>"},{"location":"ppuc/config_tool/#dipswitch","title":"DIPSwitch","text":""},{"location":"ppuc/config_tool/#switch","title":"Switch","text":"<ul> <li>Title: Choose a unique title that helps you identify the board.</li> <li>Number: This number is received by PinMame from the board and evaluated in the simulated ROM. This means that the number must be the same number that is used in the ROM. You can find this number in the manual of the pinball machine.<ul> <li>Number greater than 200: no longer belongs to the PinMame ROM, but is evaluated as Custom Switches (user-defined switches). These can trigger events in VPX-Boards in the future.</li> <li>Numbers greater than 240: are evaluated by PinMame as negative numbers. 240 is automatically subtracted from this number and a negative sign is prefixed. Examples: 241= -(241-240) = -1, 243 = -3, 260 = -20</li> </ul> </li> <li>I/O Board: The I/O board to which the switch is connected.</li> <li>Port: The number of the input on the I/O board.</li> </ul>"},{"location":"ppuc/config_tool/#switch-matrix","title":"Switch Matrix","text":""},{"location":"ppuc/config_tool/#matrix-column","title":"Matrix Column","text":""},{"location":"ppuc/config_tool/#matrix-row","title":"Matrix Row","text":""},{"location":"ppuc/config_tool/#led-string","title":"LED String","text":"<p>This controls WS2811, WS2812, and other addressable LEDs, also RGBW like SK6812. It doesn't have to be a chain. It can also be strips, or individual LEDs that are connected to each other in another way. The principle of these LEDs, however, is to form a continuous chain, in which the data line only goes in one direction and only as one strand, never in a circle. For control, data is sent to the corresponding LED. This data packet passes by all connected LEDs. Only the LED with the corresponding number responds.</p> <p> Title: Choose a unique title that helps you identify the light chain. I/O Board: The I/O board to which the LED chain is connected. Port: Port number of the board to which the LED chain is connected. For the I/O Boards 16-8-1, this is port 25. See the labeling on the board:  LED Type: Here the color type is specified. Whether RGB, GBR, BRG, RGBW, and so on... The transferred color values are put into the right order with this. Amount of LEDs: Number of LEDs in the chain.</p>"},{"location":"ppuc/config_tool/#segments","title":"Segments","text":"<p>The light chain can be divided into segments. This serves to apply animated light effects to certain sections of the chain. These effects are predefined and stored in the firmware of the boards and can be triggered. From - to defines the position of the first and last LED of the respective section in the chain.</p>"},{"location":"ppuc/config_tool/#light","title":"Light","text":"<ul> <li>After Glow (Milliseconds): The brightness of the LED is faded out and not switched off abruptly. This simulates the behavior of the incandescent lamps of the old devices.</li> <li>Light Up (Milliseconds): The brightness of the LED is faded in and not switched on abruptly. This simulates the behavior of the incandescent lamps of the old devices.</li> <li>Brightness (0-255): Defines the brightness of the entire LED chain.</li> </ul>"},{"location":"ppuc/config_tool/#led","title":"LED","text":"<p>Add LEDs to your LED chain. You can create each LED individually, or use the Clone function to adopt parameters.</p> <p></p> <ul> <li>Title: Choose a unique title that helps you identify the lamp.</li> <li>Role: Here you select the type of imitated lamp of the pinball machine. There are Lamp, Flasher (5V), GI. See the description of the lamp types a bit further down.</li> <li>Color (255, 255, 255): Here you can determine the color value of the lamp. Note that this also makes the lamp darker if values are below 255.</li> <li>String: Here you select the previously created light chain to which this LED belongs.</li> <li>String Position: The position number of the LED in the order of the data line of the chain.</li> <li>Number: This number is received by the board from PinMame from the simulated ROM. This means that the number must be the same number that is also used in the ROM to control this lamp. You can find this number in the manual of the pinball machine.</li> </ul>"},{"location":"ppuc/config_tool/#lamps","title":"Lamps","text":"<p>Lamps are LEDs that are controlled and display certain game states and events.</p>"},{"location":"ppuc/config_tool/#flashers","title":"Flashers","text":"<p>Flashers are LEDs that draw attention to game events in a particularly effective and bright way.</p>"},{"location":"ppuc/config_tool/#gi","title":"GI","text":"<p>GI means Global Illumination. This is the basic lighting of the pinball machine and not every LED is specifically controlled. Usually, the GI light is switched on as soon as the game starts.</p>"},{"location":"ppuc/config_tool/#pwm-device","title":"PWM Device","text":"<p>PWM Device refers to the electromagnets or other pinball hardware (usually installed on the playfield) that are controlled at the I/O-Board outputs with higher voltage. This also includes particularly bright lamps and flashers. For example, up to 60 volts for the I/O-Board 16-1-1.</p> <p>Pulse Width Modulation (PWM) is a technique where the output voltage is regulated by rapidly switching the current flow on and off and varying the on-time (pulse width). A longer on-pulse results in a higher average output voltage, while a shorter pulse creates a lower voltage. This method allows efficient and precise control of power output. PWM is also used to keep the output voltage stable, even if the load changes. In addition, it allows the control of LED brightness, motor speed, and power output to many other electronic devices.</p> <p></p> <ul> <li>Title: Choose a unique title that helps you identify the PWM-Device.</li> <li>Type: Since there are different types of controllable hardware with higher voltage, select the corresponding type here.</li> <li>Number: This number is received by the board from PinMame from the simulated ROM. This means that the number must be the same number that is also used in the ROM to control this hardware. You can find this number in the manual of the pinball machine.</li> <li>I/O Board: The I/O board to which the LED chain is connected.</li> <li>Port: The number of the output to which the hardware to be addressed is connected. Example I/O-Board 16-1-1: </li> </ul> <p></p> <ul> <li>Power (0-255): 0 = 0 Volt. 255 = full power supply performance (pay attention to the max allowed voltage). Values between 0 and 255 reduce the power supply voltage.</li> <li>Note: The power supply voltage does not reduce linearly! You must measure the voltage corresponding to the value before using it.</li> <li>Hold Power (0-255): With Hold Power, the power supply voltage can be reduced after the power under Power has been reached. This can be used, for example, to pull flipper fingers with full power and then hold them with reduced voltage to protect or spare the coil from burning out. The voltage is determined in the same way as the Power voltage.</li> <li>Hold Power activation time: The time for which the full voltage is applied and from then on the reduced holding voltage is switched on.</li> <li>Min Pulse Time (ms): ? ? ?</li> <li>Max Pulse Time (ms): After this set time, the voltage at the output is set to 0. This function serves to protect the hardware at this output from overheating. E.g. if there is a software error. Or if a linked input does not send the signal to turn off the output.</li> <li>Fast activation switch: This function serves to directly connect a switch with an output. A previously defined switch is selected in this dropdown field. The switch triggers the output directly via the board. For this, the detour via PinMame is not taken. E.g. for the fastest possible reaction time. Additional effects can also be built in, or the software can be changed. For example, a bumper can be implemented with it, without the software having to recognize and trigger it. But the fastest reaction of the solenoids of the flipper fingers to the flipper buttons can also be implemented with this. Note: The switch and the output must both be on the same board. And not all inputs are for ...???</li> </ul>"},{"location":"ppuc/config_tool/#typical-example-settings","title":"Typical Example Settings:","text":"<p>Warning: simply copying these examples can damage the hardware!</p> <p>Flipper Fingers: Bumper: Drop Target Up: Outhole:</p>"},{"location":"ppuc/config_tool/#view_1","title":"View","text":"<p>Here you'll always have an overview of all elements added to the game. You can also edit them directly by clicking Edit.</p> <p></p>"},{"location":"ppuc/config_tool/#config-file-export","title":"Config File Export","text":"<p>This button in the side header of a selected game saves the complete information that has been added to the game. The file name is generated from the Game Title. The file is written in plain text in YAML format. You use this file with PPUC-Pinmame. With this, the PPUC part in PinMame learns the structure of the board configuration. You can create different configurations and use them in PPUC-Pinmame.</p>"},{"location":"ppuc/config_tool/#save-configuration-completely","title":"Save Configuration Completely","text":"<p>This button in the side header of a selected game saves the complete information that has been added to the game. The file name is strangely long, but this makes it unique and machine-readable. You should regularly create a backup using this button. After triggering the button, the file is immediately saved to the browser's download folder. This file can be loaded later (Game Import) or passed on. The file is not saved in plain text and includes ROM and image files.</p>"},{"location":"ppuc/config_tool/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with your configuration, here are some common problems and solutions:</p> <ul> <li>If PinMame does not respond to your inputs, double-check that your Game On Solenoid and Coin Door Closed Switch are properly configured</li> <li>Verify that board numbers and port assignments match your physical hardware setup</li> <li>For LED chains that don't light up correctly, confirm the LED Type setting matches your actual hardware (RGB vs GRB, etc.)</li> <li>When using PWM devices, start with low power values and gradually increase to avoid damaging components</li> <li>Remember to save your configuration regularly using the Export button to avoid losing your work</li> </ul> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"ppuc/getting_started/","title":"Getting Started","text":""},{"location":"ppuc/getting_started/#planning","title":"Planning","text":"<p>If you want to run an existing playfield with PPUC you need to take some decisions:</p> <ul> <li>Should the original wiring be kept?</li> <li>Should lamps (inserts, GI and/ flashers) be replaced by addressable RGB LEDs?</li> <li>Should switches be wired using a matrix or directly.</li> <li>Which switches should drive coils as fast as possible or directly without involving the CPU?</li> </ul> <p>(Pros ans cons will be described later.)</p> <p>Multipe boards can be cascaded to to have enough input and output ports. The communication happens via a RS485 BUS and the protocol enhances the DOF protocol which is known from the virtual pinball world.</p>"},{"location":"ppuc/getting_started/#get-io-boards","title":"Get IO Boards","text":"<p>Depending on your decisions above, you you might need different IO boards and a different amount. The entire hardware is open source and you can order the boards from your preferred PCB manufacturer. Gerber and BOM files are part of the repositories:</p> <ul> <li>IO_16_8_1</li> <li>IO_16x8_matrix</li> <li>Out_8X10</li> <li>Opto_16</li> </ul>"},{"location":"ppuc/getting_started/#wiring-the-boards","title":"Wiring the boards","text":"<ul> <li>Power</li> <li>RS485 bus</li> <li>Coils</li> <li>Switches</li> <li>Lamps</li> <li>Motors</li> </ul> <p>For more details read the hardware documentation.</p>"},{"location":"ppuc/getting_started/#flash-the-io-board-firware","title":"Flash the IO Board Firware","text":"<p>To bring \"life\" into the PPUC boards they need to get some software. All the boards gets the same firmware. Details about what they shall do and what they are connected to, are set by the config file which is generated by the config tool. This will be used to initialize the boards on start up.</p> <p>The boards are distinguished by an address. This must be set by DIP switches on the board. Every board must have a different address.</p> <p>Download the latest firmware for your boards from https://github.com/PPUC/io-boards/releases/latest</p> <p>Press and hold the <code>Boot</code> button of your board and connect it to your computer via USB. Release the button after a removable mass storage device is detected by your computer. Copy the appropriate <code>uf2</code> file from the download above to that mass storage device. The board will automatically flash the firmware and reboot. Repeat that procedure for every board.</p>"},{"location":"ppuc/getting_started/#cpu","title":"\"CPU\"","text":"<p>The IO boards need a CPU, regardless if you replacing broken or missing electronics or creating a homebrew game.</p>"},{"location":"ppuc/getting_started/#pinmame","title":"PinMAME","text":"<p>The platform independent PPUC command line tool can run on any old or small computer like a Raspberry Pi and leverages libpinmame to emulate the ROM.</p>"},{"location":"ppuc/getting_started/#ppuc-config-tool","title":"PPUC Config-Tool","text":"<p>PPUC config-tool</p> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"ppuc/how_to_run/","title":"Run PPUC","text":"<p>Open a Terminal and enter the following command for a list of options: <pre><code>ppuc-pinmame -h\n</code></pre></p> <ul> <li>To get started you can do a dry run as described here.</li> <li>Clearly you need the appropiate pinmame rom for your pinball machine.</li> <li>Also a .yml file is required which defines the IO for your hardware as explaned here.</li> </ul>"},{"location":"ppuc/how_to_run/#usb-connections","title":"USB connections","text":"<p>PPUC uses USB to access your hardware:</p> <ol> <li>USB - RS485: This is required to communicate with the PPUC IO boards. Note that the comandline for the dry run uses the -n option to disable this.</li> <li>Optionally connect a ZeDMD display. This is also possible without the IO boards.</li> </ol>"},{"location":"ppuc/how_to_run/#linux","title":"Linux","text":"<p>You can use any Linux distribution you like. We tested with both Debian and Ubuntu.  For Raspberry Pi use: Raspberry Pi OS Lite (no need for a desktop or other software).</p>"},{"location":"ppuc/how_to_run/#usb-access","title":"USB access","text":"<p>USB access is only possible when your username is in the 'dialout' group.</p> <p>To see in which groups you are: <pre><code>groups\n</code></pre></p> <p>To get USB access: <pre><code>sudo usermod -a -G tty $USER\nsudo usermod -a -G dialout $USER\n</code></pre> When using Raspberry Pi OS you also need to be in the plugdev group: <pre><code>sudo usermod -a -G plugdev $USER\n</code></pre></p>"},{"location":"ppuc/how_to_run/#usb-ports","title":"USB ports","text":"<p>To check if your USB device is recognized by Linux, use: <pre><code>lsusb\n</code></pre> The following command lists the USB to serial interfaces (USB-RS485 for PPUC IO). <pre><code>ls -l /dev/ttyUSB*\n</code></pre></p>"},{"location":"ppuc/how_to_run/#run","title":"Run","text":"<p>Run from the ppcu directory: <pre><code>ppuc/ppuc-pinmame -c &lt;your&gt;.yml\n</code></pre> This should run PPUC with RS484 communication to control the IO boards. It will also use a ZeDMD when available. Exit with CTRL-C.</p>"},{"location":"ppuc/how_to_run/#virtualbox","title":"VirtualBox","text":"<p>Oracle VirtualBox is a very nice tool to experiment with the software. Especially when you are not familiar with the Linux OS:</p> <ul> <li>Run any Linux distro in a separate virtual machine (a fresh start is easy). Easy to remove / delete when done.</li> <li>Use snapshots to save a specific machine state. That allows you to go back to a known good situation.</li> <li>Have a secure environment which is isolated from your OS, disks and network. You control what is shared / connected.</li> </ul> <p>After creating a virtual computer it is best to install the VirtualBox Guest Additions: </p> <ul> <li>Allows you to copy-paste from your computer (host) to the virtual machine.</li> <li>Provides functionallity to share folders.</li> </ul> <p>When you want to use ppuc on the the virtual Linux machine with hardware (IO boards / ZeDMD) install the VirtualBox Extension Pack. Then you can use the Virtual Machine Status Bar to connect with the appropiate USB port(s).</p> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"ppuc_hardware/","title":"PPUC Hardware","text":"<p>When we talk about hardware, we actually often mean the PCBs (printed circuit boards) of the PPUC project. Of course there is more hardware in a pinball machine that is somehow all connected to each other (like solenoids, lamps, power supply, ...).</p> <p>EM (electro mechanical) machines are not covered here (although you could pimp them up with electronics).</p> <p>Virtual pinball machines can profit from PPUC. You can make them much more interesting with this hardware but this article concentrates on building real pinball machines.</p> <p>After reading this article you should have an understanding of</p> <ul> <li>what hardware is needed for a pinball machine</li> <li>what specific hardware of the PPUC project is available</li> <li>how PPUC and other hardware is connected and wired</li> <li>which wires are needed</li> <li>how the PCBs are connected to each other</li> <li>how much power is needed</li> <li>what kind of power supply can be used</li> <li>how many PCBs are needed</li> </ul>"},{"location":"ppuc_hardware/#hardware-used-for-a-pinball-machine","title":"Hardware Used for a Pinball Machine","text":"<p>To build a pinball machine you usually need some stuff. Here are the most important things.</p> <p>You find tons of information here: PinWiki</p>"},{"location":"ppuc_hardware/#electronics","title":"Electronics","text":"<p>These are the PCBs that drive the solenoids, reads the switches, runs the software and lights the bulbs. They also take care of the correct power supply and voltages for the parts.</p> <p></p>"},{"location":"ppuc_hardware/#solenoids","title":"Solenoids","text":"<p>These are used for mechanical action. They are made of a coil of wire and a metal plunger. When electricity flows through the coil, it generates a magnetic field that pulls or pushes the plunger and thereby makes a linear motion.</p> <p></p>"},{"location":"ppuc_hardware/#switches","title":"Switches","text":"<p>Switches recognizes where the balls are at the moment or what state an actor is in. They can be directly wired to an input or (to save wires and ports) they can be wired as a matrix (e.g. 8x8 -&gt; 64 switches done with 16 ports). Matrix concept is more complex and need diodes at the switches. Switches can be mechanical or optical.</p> <p></p> <p></p>"},{"location":"ppuc_hardware/#lamps","title":"Lamps","text":"<p>These are used for bling bling. They light the inserts (bottom of playfield), the general illumination (GI) on top of the playfield and they are used for special effects like flashers. The flashers are typically lit only for less than a second. They have higher power and voltage than bulbs for GI and inserts. Nowadays LEDs are used for lamps and flashers but in older machines incandescent light bulb were used. Like the switches the lamps can be controlled directly (one by one) or in a lamp matrix arrangement.</p> <p></p> <p> </p>"},{"location":"ppuc_hardware/#display","title":"Display","text":"<p>Used to display the score, rules, video modes and animations.</p> <ul> <li>Nowadays TFT (thin film transistor) technology is used (well known from computer monitors).</li> <li>In the 90s DMD (dot matrix display) was the main technology. That is a monochrome (orange on black) display with a typical resolution of 128x32 pixels.</li> <li>Earlier machines uses 7 (or more) segment displays</li> </ul> <p></p> <p></p>"},{"location":"ppuc_hardware/#audio","title":"Audio","text":"<p>To get some sound to your ears several speakers are used with an amplifier that is usually part of the electronics PCBs.</p>"},{"location":"ppuc_hardware/#specific-hardware-of-the-ppuc-project","title":"Specific Hardware of the PPUC Project","text":"<p>We designed some specific PCBs for PPUC project although they might be useful in other applications as well. Here is an overview what is available and what they can do. Fore more information there is a detailed description available for each PCB.</p> <ul> <li>IO_16_8_1: most basic PCB, always needed. Used for reading switches, driving solenoids and control one LED strip.</li> <li>IO_16x8_matrix: convenient if a switch matrix is used. Especially if the original cable harness shall be used. Can control a 16x8 switch matrix. Or use for 16 inputs and 8 outputs. Also can control one LED strip.</li> <li>Out_8x10: convenient if a lamp matrix is used. Especially if the original cable harness shall be used. Can control a 8x10 lamp matrix (only LEDs, no incandescent light bulbs!). Or use for 8 high side outputs and 10 low side outputs. Also can control one LED strip.</li> <li>Opto_16: used to directly attach optical switches like opto couplers or LED transmitter/receiver pairs.</li> </ul> <p>The following table shows how many functions can be done with wich PCB. With that table you can estimate how many PCBs you need for your specific project. Just count the needed solenoids, flashers, lamps and switches. Take into account if you want to use controlled LED strips vs LED matrix vs direct LED drivers (mostly a mixture is used). Also think about direct switches vs switch matrix. And take into account if you have original opto boards from your pin or not.</p> Function/Name IO_16_8_1 IO_16x8_matrix Out_8x10 Opto_16 direct switch 16 16 - - switch matrix 8x8 <sup>1</sup> 16x8 - - solenoid 8 - - - direct LED 4+8 <sup>2</sup> 8 <sup>4</sup> 10 <sup>4</sup> - LED matrix - - 8x10 - LED flasher 4+8 <sup>2</sup> - 10 <sup>4</sup> - LED strip 1 1 1 1 opto switch (16) <sup>3</sup> (16) <sup>3</sup> - 16 UART/SPI/I2C 1 - - - ADC <sup>5</sup> - - - 2 PWM <sup>6</sup> - - - 6"},{"location":"ppuc_hardware/#how-to-connect-ppuc-pcbs-with-pinball-parts","title":"How to Connect PPUC-PCBs With Pinball Parts","text":""},{"location":"ppuc_hardware/#direct-switch","title":"Direct Switch","text":"<p>Wiring is straight forward. Switches must close to ground (GND, G). The GND can be connected at the switches or at the terminal clamp. All terminals named \"G\" are good for the common switch connection.</p> <p>Recommendation for wire cross section is 0.25 mm\u00b2. The wires can be as thin as it is practical from a mechanical point of view. They must carry only a few milliamperes of current. They should not be thicker than 0.5 mm\u00b2 as they should easily fit into a terminal clamp (better if two wires fit into one clamp).</p> <p></p> <p></p>"},{"location":"ppuc_hardware/#switch-matrix","title":"Switch Matrix","text":"<p>To use the switches in a matrix all switches must have a diode in series. The switches are not connected to ground but to the column and row terminals (if the terminals act as row or column has to be declared in the configuration file).</p> <p>Recommendation for wire cross section is 0.25 mm\u00b2. The wires can be as thin as it is practical from a mechanical point of view. They must carry only a few milliamperes of current. They should not be thicker than 0.5 mm\u00b2 as they should easily fit into a terminal clamp (better if two wires fit into one clamp).</p> <p></p> <p></p>"},{"location":"ppuc_hardware/#solenoid","title":"Solenoid","text":"<p>Wiring solenoids is straight forward. Two terminals for each solenoid. No need for a diode. If there is a diode already at the coil you can leave it there but make sure the HV terminal is at the diodes ring. Better double check - otherwise smoke will rise.</p> <p>Be aware that the power output switches are open drain. Therefore you also need a power supply for the solenoids. This is distributed by the board to the HV-terminals. Just connect the power (e.g. 48 V) to the terminals called HV_IN (+) and G_IN (-).</p> <p>Use a paired cable (like speaker cable). Recommendation for wire cross section is 2 x 0.5 mm\u00b2. Shouldn't be thicker than 1.5 mm\u00b2 as the clamps can't take thicker cables.</p> <p></p> <p></p>"},{"location":"ppuc_hardware/#direct-led","title":"Direct LED","text":"<p>To connect a LED (including rectifier, current limiting resistor and capacitor) you can use a mid power output that closes the circuit to ground (same is true for drivers of the matrix boards wich could also be used). Therefore the LED must be supplied with a voltage of typically 6.3 V but 5 V will do as well with slightly reduced brightness. You could also use a high power output. In that case connect it like a solenoid and don't forget to adjust the PWM in the config file for correct voltage.</p> <p>Recommendation for wire cross section is 0.25 mm\u00b2. You can roughly estimate a maximum current of 20 mA per LED.</p> <p></p> <p></p>"},{"location":"ppuc_hardware/#led-matrix","title":"LED Matrix","text":"<p>A LED matrix can only be controlled by the Out_8x10 board. Like in the switch matrix every LED must have a diode in series. The LEDs are connected to the high-side and low-side switches of the Out_8x10 board. Be aware that you need a high supply voltage (20 V) for the matrix as the LEDs are only on for a short time.</p> <p>Recommendation for wire cross section is 0.25 mm\u00b2. You can roughly estimate a maximum current of 20 mA per LED.</p> <p></p> <p></p>"},{"location":"ppuc_hardware/#led-flasher","title":"LED Flasher","text":"<p>Flashers are connected like direct LEDs. Use a mid power output or connect them like solenoids (with adjusted PWM value in the config file).</p>"},{"location":"ppuc_hardware/#general-illumination-gi","title":"General Illumination (GI)","text":"<p>The GI (consisting of several LEDs in parallel) are usually connected like solenoids (with adjusted PWM value in the config file). But you can also use a mid power output (likewise the direct LEDs).</p>"},{"location":"ppuc_hardware/#controlled-led-strip","title":"Controlled LED Strip","text":"<p>Controlled LED strips (e.g. with WS2812B LEDs) are daisy chained LEDs that can be individually controlled. To archive that each LED has a chip inside. Power supply is 5 V and the single data line is connected to a special terminal (#25).</p> <p>How much current for LED strips? No idea as there is no value in the data sheet. Just found this as a reference (36 mA per RGB-LED for WS2812B): SunTech Lite</p> <p>Recommendation for wire cross section is 0.5 mm\u00b2 (for power lines).</p> <p></p> <p></p>"},{"location":"ppuc_hardware/#optical-switches","title":"Optical Switches","text":"<p>If you have the original opto boards form you pinball, you can use them and connect them like direct switches or within a switch matrix.</p> <p>If you don't have the original board you can use the Opto_16 board. This has divers and receivers for 16 optical switches. They can be configured (with jumpers) in two groups: for LED receivers and for transistor receivers.</p> <p>Recommendation for wire cross section is 0.25 mm\u00b2.</p> <p></p> <p></p> <p></p>"},{"location":"ppuc_hardware/#display_1","title":"Display","text":"<p>These kinds of display are commonly used in pinball machines:</p> <ul> <li>TFT: thin film transistor technology, used in newer machines, well known from computer monitors. If you want to use a TFT in your own machine you can connect this directly to your main pinball controller (like a raspberry pi) per HDMI or similar.</li> <li>DMD: dot matrix display, used in the 90th, typically a monochrome (orange) plasma with a typical resolution of 128x32 pixel. In your own PPUC pinball machine you want to replace this by a RGB-LED-matrix display. See section ZeDMD.</li> <li>Segment: 7 or more plasma segments that can display alphanumerical content, used in earlier pins. In your own PPUC pinball machine you want to replace these by a RGB-LED-matrix display. See section ZeDMD.</li> </ul>"},{"location":"ppuc_hardware/#sound","title":"Sound","text":"<p>To get some audio to your ears one or more speakers and an amplifier is necessary. The audio source is generated by the main pinball controller (like a raspberry pi) and can be connected by Bluetooth or USB or audio jack. There is no special PPUC equipment available (as it isn't needed).</p>"},{"location":"ppuc_hardware/#how-to-connect-ppuc-pcbs-with-each-other","title":"How to Connect PPUC-PCBs With Each Other","text":"<p>All PPUC board needs a power supply (5 V) and a connection to the communication bus (RS485).</p> <p>The 5 V power supply can be wired in a star topology or from one board to the next. Connect the 5 V power supply to the terminals called 5_IN (+) and G (-). The board itself doesn't need much power (about 250 mW). Therefore the wires can be thin. Anyways it's recommended to use 0.5 mm\u00b2 cross section as you often want to power more from the 5 V (like LED strips).</p> <p>The bus connection shall be made in a line topology (one board to the next) using terminals called \"A\" and \"B\". Typically starting at the main pinball controller (like a raspberry pi) and end on one of the PPUC boards. Be aware that the communication bus works best when it is terminated on both ends and has a bias network anywhere along the bus. This can conveniently be done by jumpers on the PPUC boards. </p> <ul> <li>IO_16_8_1: set JP2 for termination. Set JP1 and JP3 for biasing.</li> <li>IO_16x8_matrix, Opto_16, Out_8x10: set JP1 for termination (no biasing possible)</li> </ul> <p>Use only exactly one bias network on the bus (no matter where). Terminate the bus at the geometrical start and at the geometrical end (not in between) and never add more than these two terminations.</p> <p></p> <p>If you use a shielded cable you can connect the shield to the terminal called SHD. Shielding is not mandatory but twisted pair cable is recommended.</p>"},{"location":"ppuc_hardware/#thoughts-on-power-supply","title":"Thoughts on Power Supply","text":"<p>It can kill you! Be aware that you work with deadly voltages, especially on the primary side. If you don't know exactly what you are doing, leave it and ask for help on this part. I repeat: it can kill you, no joke!</p> <p></p> <p>Having said that let's come to the technical part. You have to know how much power you need on the 5 V side and on the 48 V side and if it should be 48 V or less. Let's brake this down:</p>"},{"location":"ppuc_hardware/#5-v-supply","title":"5 V Supply:","text":"<ul> <li>PPUC boards -&gt; 250 mW per board</li> <li>LED strip -&gt; 180 mW per RGB-LED</li> <li>single LED or LED matrix or GI -&gt; 100 mW per LED</li> <li>ZeDMD -&gt; 20 W maximum (all pixels white). In pinball use with lots of colors and therefore less brightness it's probably the half.</li> <li>Raspberry Pi 4: 12 W</li> </ul> <p>For example: 4 boards (1 W) + 50 GI LEDs (5 W) + 70 LED-strip (13 W) + ZeDMD (20 W) + Raspberry Pi (12 W) -&gt; adds up to 51 W. So you need a 5 V, 10 A power supply. Of course you can split the 5 V supply. E.g. power the Pi or the DMD with a separate power supply.</p>"},{"location":"ppuc_hardware/#48-v-supply","title":"48 V Supply:","text":"<p>48 V is a good standard voltage for modern solenoids. But you could as well use 24 V (for older solenoids). It depends on what you already have. But be aware that with the PWM you can lower the 48 V to any voltage you want. For example with 48 V and a PWM of 50 % the solenoids akt like they would be connected to 24 V.</p> <p>It's hard to estimate the needed power on the 48 V side. That depends much on how many solenoids are used and how many are active at the same time. Are magnets in the machine? To get a feeling: a WPC flipper finger needs 500 W when flipping (takes about 25 milliseconds) and 30 W while holding.</p> <p>Recommendation is 500 W for WPC and modern machines (500 W are used in Stern Spike 2 systems). For a system 11 probably 350 W is sufficient. </p>"},{"location":"ppuc_hardware/#20-v-for-led-matrix","title":"20 V for LED Matrix","text":"<p>If you want to use a LED matrix you must have a power supply of about 20 V. You can derive that from your 48 V with a DC/DC converter or use a separate power supply for the matrix. Needed power is 100 mW per LED.</p>"},{"location":"ppuc_hardware/#power-for-audio","title":"Power for Audio","text":"<p>If your amplifier doesn't have a power supply on board, you need that on top. It's recommended to use a separate power supply for sound (less distortion and noise). Needed power and voltage depends on your amplifier (look in it's data sheet). Typical values are 24 V, 100 W.</p>"},{"location":"ppuc_hardware/#putting-it-all-together","title":"Putting it All Together","text":"<p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul> <ol> <li> <p>with modifications on input resistor. On cost of inputs. Mixture mode is also possible (e.g. 8 direct switches and a 4x4 matrix)\u00a0\u21a9</p> </li> <li> <p>4 x mid power output on cost of 4 inputs plus 8 high power outputs\u00a0\u21a9\u21a9</p> </li> <li> <p>only the receiver side can be connected if it is an transistor type and if it switches to GND (common emitter). On cost of inputs.\u00a0\u21a9\u21a9</p> </li> <li> <p>on cost of matrix drivers\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>analog to digital converter\u00a0\u21a9</p> </li> <li> <p>pulse with modulation (e.g. for analog output signals)\u00a0\u21a9</p> </li> </ol>"},{"location":"ppuc_hardware/io_16_8_1/","title":"IO_16_8_1","text":"<p>This is the hardware for a standard IO card which was designed for the PPUC pinball project, but can be useful in other applications as well. It is designed for being low cost and functional for experimental use. Not everything is tested nor does it fulfill EMC or any other specifications. Use at your own risk! To make use of anything of this project a basic understanding of electronics and programming is necessary. Nothing of it is \"plug and play\". I'm surely not liable for any damage to assemblies, pinball machines or even persons.</p>"},{"location":"ppuc_hardware/io_16_8_1/#picture-of-the-board","title":"Picture of the Board","text":""},{"location":"ppuc_hardware/io_16_8_1/#name","title":"Name","text":"<p>IO_16_8_1 as it has 16 inputs, 8 outputs and one special output. Actually the inputs can also be used as outputs (see later in this document).</p>"},{"location":"ppuc_hardware/io_16_8_1/#power-supply","title":"Power Supply","text":"<p>The IO card must be supplied by 5 V (+-0.5 V) for logic and inputs. Additionally nominal 48 V for high power outputs. As these outputs are open drain, the voltage can actually be up to 60 V. In the circuit diagram the voltage is called 48 V.</p>"},{"location":"ppuc_hardware/io_16_8_1/#controller","title":"Controller","text":"<p>A RP2040 is used for it's cost/performance ratio. It is the same controller that is used in the Raspberry Pi Pico.</p>"},{"location":"ppuc_hardware/io_16_8_1/#communication-interfaces","title":"Communication Interfaces","text":"<ul> <li>RS_485: main communication interface for controlling outputs and scan inputs. Usually connected to a host interface like a PC or Raspberry Pi or similar.</li> <li>USB C: for programming, debug and flashing</li> <li>Serial Wire: alternative for programming, debug and flashing</li> <li>IIC: the PCB can be populated with an QWIIC connector (normally not mounted). This can be used for connecting to other PCBs or experimental use. It uses the same UART as for the RS485.</li> <li>UART, I2C, SPI: instead of using the input pins for inputs they can also be used as an additional interface (see docu of RP2040 for pins and function). Speed up to 10 kHz should be possible (100 kHz for In_2 and In_3).</li> </ul>"},{"location":"ppuc_hardware/io_16_8_1/#switches-on-board","title":"Switches (on board)","text":"<ul> <li>Reset: hardware reset for controller (RP2040)</li> <li>Boot: if active the board connects to a PC like an USB stick. Usually used for programming the code into the flash memory on the board.</li> <li>DIP-switches: usually used to select an address for RS485 (16 combinations)</li> </ul>"},{"location":"ppuc_hardware/io_16_8_1/#inputs-and-low-power-outputs","title":"Inputs (and low power outputs)","text":"<p>The 16 inputs are used for reading the state of an external switch. The switch is normally connected to ground (GND). Internally the input is pulled up to 5 V by a 10k resistor.</p> <p>All inputs can also be used as signal-outputs (if programmed accordingly). The output is internally pulled up by a 10k resistor to 5 V. A higher voltage can be applied externally (max. 30 V) but be sure to have your hardware and software! setup correctly as no protection for damage is provided in that case. A maximum of 2 mA can be sinked/sourced.</p> <p>The inputs In_2 and In_3 are designed for higher speed (100 kHz). The Pull-Up can be soldered to other pads to be pulled to 3,3 V (instead of 5 V). An input capacitance can be added (soldered) for better noise immunity but lower speed. Since version 1.0.1 the caps are soldered by default and must be removed if a high-speed serial connection is needed.</p> <p>The input terminals can also be \"miss\"used for a switch matrix. To do that (no matter if used as coloum or row) the input resistor (330 Ohm) must be short cut (or replaced by a zero Ohm type). Background: the 330 Ohm resistor protects the circuit if the terminal is used as an output and accidently a short cut is done at the terminal. Unfortunately the low voltage value gets too high when used in a switch matrix (diode voltage plus voltage drop due to added up currents through the resistor). This happens when more switches are closed at the same time. Instead you could also use the specially designed PCB \"Hardware_IO_16x8_matrix\" for your switch matrix.</p> <p>The inputs In_13 to In_16 have an additional open drain output transistor that allows higher currents in case of being used as an output (up to 3 A at 25 \u00b0C ambient temperature). The outputs are internally pulled up by a 10k resistor to 5 V. A higher voltage (max. 30 V) can be applied externally but be sure to have your hardware and software! setup correctly as no protection for damage is provided in that case. Please be aware that the default state (before software takes over control) is \"on\". If used as input In_13 to In_16 feature a memory (similar to a relay self-holding function). If the input has ever seen a low signal (e.g. switch closed to GND) it will stay that way until it gets an active high signal from the RP2040 (make the corresponding pin an output with signal \"high\" and then make it an input again). If this behavior is not wanted you can lift pin 3 of Q13 to Q16, then you have an input/output like e.g. terminal 1 with static behavior but no additional output power.</p>"},{"location":"ppuc_hardware/io_16_8_1/#high-power-outputs","title":"High Power Outputs","text":"<p>There are 8 high power outputs available. Usually they are connected to pinball solenoids or flashers. A recovery diode for the solenoids is placed on the pcb, so no need for diodes at the coils. The outputs are open drain and drive currents up to 20 A with a load connected to a voltage of up to 60 V. Be aware that the current is limited by the fuse F2. It will blow within about 1 s at 20 A. You might use a 10 A fuse if necessary.</p> <p>It's recommended to use 2 wires (back and forth) for each solenoid. That improves the EMC a lot.</p>"},{"location":"ppuc_hardware/io_16_8_1/#special-output","title":"Special Output","text":"<p>One special output is available for high speed signals. The voltage is 5 V, it is a push pull output that can drive a current up to 8 mA. It can be used to e.g. control a WS2812 LED strip.</p>"},{"location":"ppuc_hardware/io_16_8_1/#recommendations","title":"Recommendations","text":"<ul> <li>Connect only one Flipper to a pcb if possible. The advantage is, that all the energy of the big capacitor is available for the flipper, which is usually the solenoid with the highest current. If you have more flipper fingers than PCBs then spread the flipper solenoids as even as possible across the PCBs (e.g. if you have 6 flipper fingers it's better to connect 2 per board instead of all 6 at one board).</li> <li>Wire related switches and solenoids for fast flip devices (e.g. flipper, bumper, sling, kick back) to the same pcb. Then you can archive the shortest possible time lag between activating the switch and firing the solenoid.</li> <li>RS485 termination: short JP2 at the end of the RS485 bus. There should also be a 120 Ohm resistor at the beginning of the bus (e.g. USB to RS485 adapter).</li> <li>RS485 biasing: short JP1 and JP3 exactly once at any point of the RS485 bus. Only do this if no resistors are installed on the USB to RS485 adapter.</li> <li>It's recommended to use flipper coils for higher voltage (like 40 - 50 V) as they draw less current. Since Version 1.1.1 low resistance coils (designed for 24 V) should work as well. You should also change the fuse F2 to 10 A for that application.</li> <li>If the MOSFETs on the high power outputs are not available (or you want to use the big player brands) here are some alternatives (I haven't tested any of them, but they should work according to their specification): GL40N10A4 (seems to be the same as NCE0140KA), RD3P200SNFRA, NVD6824NL, IPD90N10S4L-06, LSGG10R085W3</li> </ul> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"ppuc_hardware/io_16x8_matrix/","title":"IO_16x8_matrix","text":"<p>This is the hardware for a 16x8 switch matrix card which was designed for the PPUC pinball project, but can be useful in other applications as well. The intentionally usecase is to connect an original equipped pinball playfield (including cable harness and diodes). Normally I'd prefer direct switches but if all the switches and cables and diodes are in place already, it is useful to connect the switch matrix directly. The board can also be used for 16 direct inputs and 8 low power signal-outputs (no matrix). It is designed for being low cost and functional for experimental use. Not everything is tested nor does it fulfill EMC or any other specifications. Use at your own risk! To make use of anything of this project a basic understanding of electronics and programming is necessary. Nothing of it is \"plug and play\". I'm surely not liable for any damage to assemblies, pinball machines or even persons.</p>"},{"location":"ppuc_hardware/io_16x8_matrix/#picture-of-the-board","title":"Picture of the Board","text":""},{"location":"ppuc_hardware/io_16x8_matrix/#name","title":"Name","text":"<p>IO_16x8_matrix as it has 16 inputs and 8 signal-outputs to form a 16x8 switch matrix but could also be used as direct inputs and low power outputs. Actually it has an additional high speed output (see \"Special Output\" below).</p>"},{"location":"ppuc_hardware/io_16x8_matrix/#power-supply","title":"Power Supply","text":"<p>The IO card must be supplied by 5 V (+-0.5 V). In the circuit this is named 5V_IN.</p>"},{"location":"ppuc_hardware/io_16x8_matrix/#controller","title":"Controller","text":"<p>A RP2040 is used for it's cost/performance ratio. It is the same controller that is used in the Raspberry Pi Pico.</p>"},{"location":"ppuc_hardware/io_16x8_matrix/#communication-interfaces","title":"Communication Interfaces","text":"<ul> <li>RS_485: main communication interface for controlling the outputs. Usually connected to a host interface like a PC or Raspberry Pi or similar.</li> <li>USB C: for programming, debug and flashing</li> <li>Serial Wire: alternative for programming, debug and flashing</li> </ul>"},{"location":"ppuc_hardware/io_16x8_matrix/#switches-on-board","title":"Switches (on board)","text":"<ul> <li>Reset: hardware reset for controller (RP2040)</li> <li>Boot: if active, the board connects to a PC like an USB stick. Usually used for programming the code into the flash memory on the board.</li> <li>DIP-switches: usually used to select an address for RS485 (16 combinations)</li> </ul>"},{"location":"ppuc_hardware/io_16x8_matrix/#signal-outputs","title":"Signal Outputs","text":"<p>There are 8 outputs that can be set to 5 V or GND. They are intended to drive the switch matrix (column at WPC, row at S.A.M.). The 5 V signal is derived from the 5 V supply by a 1 kOhm pull up resistor. Therefore it is only good for signaling, not for power load. If used as a matrix please be aware that every switch must have a diode in series.</p>"},{"location":"ppuc_hardware/io_16x8_matrix/#inputs","title":"Inputs","text":"<p>There are 16 inputs intended to receive the switch status of the matrix (row at WPC, column at S.A.M.). They are pulled up to 5 V and switch at a voltage of about 1.9 V. The inputs are made for low active signals (switched to GND). If used as a matrix please be aware that every switch must have a diode in series.</p>"},{"location":"ppuc_hardware/io_16x8_matrix/#special-output","title":"Special Output","text":"<p>One special output is available for high speed signals. The voltage is 5 V, it is a push pull output that can drive a current up to 8 mA. It can be used to e.g. control a WS2812 LED strip.</p>"},{"location":"ppuc_hardware/io_16x8_matrix/#connectors","title":"Connectors","text":"<p>There are pads for connectors that fit S.A.M. systems and also WPC systems. The pinning of the returns (rows at WPC) is unfortunately vice versa to S.A.M. so the connector of the original WPC cable harness has to be rotated by 180\u00b0 (cables go to the inner side of PCB).</p> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"ppuc_hardware/opto_16/","title":"Opto_16","text":"<p>This is the hardware for a opto board which was designed for the PPUC pinball project, but can be useful in other applications as well. It is designed for being low cost and functional for experimental use. Not everything is tested nor does it fulfill EMC or any other specifications. Use at your own risk! To make use of anything of this project a basic understanding of electronics and programming is necessary. Nothing of it is \"plug and play\". I'm surely not liable for any damage to assemblies, pinball machines or even persons.</p>"},{"location":"ppuc_hardware/opto_16/#name","title":"Name","text":"<p>Opto_16 as it has 16 inputs and 16 led divers. Additionally it has one special output.</p>"},{"location":"ppuc_hardware/opto_16/#application","title":"Application","text":"<p>Please be aware that in pinball many different opto types are used. You have to know which type of opto coupling you need for your purpose. I found the following types: * Optos with photo transistors as a receiver and common collector (used for example in Dirty Harry with board A-16998.1). * Optos with photo transistors as a receiver and common emitter (used for example in Rollergames with board C-13205). Commonly used for drop targets and flipper buttons. * Optos with photo diodes as a receiver (used for example in World Poker Tour with board 520-5239-01).</p> <p>The transmitter LEDs I've seen so far, are either single (2 pins) or share a common cathode.</p> <p>This Opto_16 PCB can be used to drive transmitter LEDs from a 5 V power supply and can cope with common collector photo transistors and photo diodes. There are 2 groups of inputs (2 x 8). One group is for photo transistors. The other group can be configured to be inputs for photo diode or photo transistor. Jumpers are used for configuration. You can only change the whole group (8 inputs), not a single channel. If no jumper is placed (all open) then the configurable group of 8 inputs are good for photo diodes. If you want them to be for photo transistors you have to close jumper JP2 and also put jumpers on the channel-connectors J18 to J25. Actually only the connectors for used channels has to be shorted by a jumper, not used channel can be left open.</p> <p>If you have an application with common emitters you can use the inputs of the switch-matrix board (IO_16x8_matrix) of the PPUC project. The inputs of the standard IO board (IO_16_8_1) should work as well. In either case you need to drive the transmitter LED with a constant current of about 20 mA. This can be done with a 180 Ohm resistor at a 5 V supply (you have to wire this yourself).</p> <p>If you have an opto board already (e.g. from an existing pinball machine) you can use this with the inputs of the switch-matrix board (IO_16x8_matrix) or the inputs of the standard IO board (IO_16_8_1). Connect the output transistor of the opto board to the input of the PPUC board in a way that the transistor switches to ground. Be aware that opto boards are powered with either 12 V or 5 V in existing pinball machines. Both can be used with PPUC.</p>"},{"location":"ppuc_hardware/opto_16/#power-supply","title":"Power Supply","text":"<p>The IO card must be supplied by 5 V (+-0.5 V). In the circuit this is named 5V_IN.</p>"},{"location":"ppuc_hardware/opto_16/#controller","title":"Controller","text":"<p>A RP2040 is used for it's cost/performance ratio. It is the same controller that is used in the Raspberry Pi Pico.</p>"},{"location":"ppuc_hardware/opto_16/#communication-interfaces","title":"Communication Interfaces","text":"<ul> <li>RS_485: main communication interface for controlling the outputs. Usually connected to a host interface like a PC or Raspberry Pi or similar.</li> <li>USB C: for programming, debug and flashing</li> <li>Serial Wire: alternative for programming, debug and flashing</li> </ul>"},{"location":"ppuc_hardware/opto_16/#switches-on-board","title":"Switches (on board)","text":"<ul> <li>Reset: hardware reset for controller (RP2040)</li> <li>Boot: if active, the board connects to a PC like an USB stick. Usually used for programming the code into the flash memory on the board.</li> <li>DIP-switches: usually used to select an address for RS485 (16 combinations)</li> </ul>"},{"location":"ppuc_hardware/opto_16/#led-drivers","title":"LED drivers","text":"<p>There are 16 outputs. Each of them drives one LED (usually red or infra red).</p>"},{"location":"ppuc_hardware/opto_16/#inputs","title":"Inputs","text":"<p>There are 2 groups of inputs, each with 8 channels: * A group of 8 inputs are designed to be used with optos that use a photo transistor as receiver and are connected to have a common collector. * A group of 8 inputs are designed to be used with optos that use a photo diode as receiver. They are usually single (two pins) or share a common cathode.</p>"},{"location":"ppuc_hardware/opto_16/#special-output","title":"Special Output","text":"<p>One special output is available for high speed signals. The voltage is 5 V, it is a push pull output that can drive a current up to 8 mA. It can be used to e.g. control a WS2812 LED strip.</p>"},{"location":"ppuc_hardware/opto_16/#additional-analog-functions","title":"Additional analog functions","text":"<ul> <li>There are 2 ADC channels from the RP2040 made accessible through a connector. Filtered by a 1st order low pass (1 kOhm/100 nF, fg = 1.6 kHz).</li> <li>6 GPIOs are also routed to this connector. They are also filtered by a 1st order low pass (1 kOhm/100 nF, fg = 1.6 kHz) and could be used for analog output per PWM.</li> </ul>"},{"location":"ppuc_hardware/opto_16/#connectors","title":"Connectors","text":"<p>There are pads for connectors that fit the A-16998.1 board. Additionally for 8 inputs and drivers there are pins for single LEDs (transmitter and receiver) in 2.54 mm pitch.</p> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"ppuc_hardware/out_8x10/","title":"Out_8x10","text":"<p>This is the hardware for a LED lamp matrix card which was designed for the PPUC pinball project, but can be useful in other applications as well. The intentionally usecase is to connect an original equipped pinball playfield (including cable harness). Normally I'd prefer a serial WS2812 LED strip to do a DIY pinball but if all the LEDs and cables are in place already, it is useful to connect the lamp matrix directly (for LED use only, not for incandescent bulbs as power of the outputs is limited). It is designed for being low cost and functional for experimental use. Not everything is tested nor does it fulfill EMC or any other specifications. Use at your own risk! To make use of anything of this project a basic understanding of electronics and programming is necessary. Nothing of it is \"plug and play\". I'm surely not liable for any damage to assemblies, pinball machines or even persons.</p>"},{"location":"ppuc_hardware/out_8x10/#picture-of-the-board","title":"Picture of the Board","text":""},{"location":"ppuc_hardware/out_8x10/#name","title":"Name","text":"<p>Out_8x10 as it has 18 outputs. 8 high side switches and 10 low side switches which can form a 8x10 matrix but could also be used as simple high side and low side outputs.</p>"},{"location":"ppuc_hardware/out_8x10/#power-supply","title":"Power Supply","text":"<p>The IO card must be supplied by 5 V (+-0.5 V) for logic and nominal 20 V for outputs. As these outputs are open source and open drain, the 20 V supply can actually be 7 V up to 26 V. In the circuit diagram the voltage is called 20 V.</p>"},{"location":"ppuc_hardware/out_8x10/#controller","title":"Controller","text":"<p>A RP2040 is used for it's cost/performance ratio. It is the same controller that is used in the Raspberry Pi Pico.</p>"},{"location":"ppuc_hardware/out_8x10/#communication-interfaces","title":"Communication Interfaces","text":"<ul> <li>RS_485: main communication interface for controlling the outputs. Usually connected to a host interface like a PC or Raspberry Pi or similar.</li> <li>USB C: for programming, debug and flashing</li> <li>Serial Wire: alternative for programming, debug and flashing</li> </ul>"},{"location":"ppuc_hardware/out_8x10/#switches-on-board","title":"Switches (on board)","text":"<ul> <li>Reset: hardware reset for controller (RP2040)</li> <li>Boot: if active, the board connects to a PC like an USB stick. Usually used for programming the code into the flash memory on the board.</li> <li>DIP-switches: usually used to select an address for RS485 (16 combinations)</li> </ul>"},{"location":"ppuc_hardware/out_8x10/#high-side-switch-outputs","title":"High Side Switch Outputs","text":"<p>There are 8 outputs featuring a high side switch, usually used for lamp coloums. The voltage is derived form 20 V power connection. Current and power is limited by a linear regulator (78L24) wich is actually not used for regulating the voltage but to protect the switch form overload in case of a short circuit. Each output can drive a constant current of 100 mA witch is normaly sufficiant for 10 LED lamps (e.g. 10 rows of LEDs). Short term peak current is about 300 mA. The 20 V supply can actually range from 7 V to 26 V (the lower limit is derived from UGS of the high side FET).</p>"},{"location":"ppuc_hardware/out_8x10/#low-side-switch-outputs","title":"Low Side Switch Outputs","text":"<p>There are 10 outputs featuring a low side switch, usually used for lamp rows. The outputs are open drain and drive currents up to 3 A with a load connected to a voltage of up to 30 V.</p>"},{"location":"ppuc_hardware/out_8x10/#special-output","title":"Special Output","text":"<p>One special output is available for high speed signals. The voltage is 5 V, it is a push pull output that can drive a current up to 8 mA. It can be used to e.g. control a WS2812 LED strip.</p>"},{"location":"ppuc_hardware/out_8x10/#connectors","title":"Connectors","text":"<p>There are pads for connectors that fit S.A.M. systems and also WPC systems. Be aware that J5 (WPC columns) is actually not in the PCB layout as it can be mounted on pins 1 to 9 of J6 (S.A.M. columns). The pinning is unfortunately vice versa so the connector of the original WPC cable harness has to be rotated by 180\u00b0 (cables go to the inner side of PCB).</p> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"},{"location":"zedmd/","title":"ZeDMD","text":""},{"location":"zedmd/#about","title":"About","text":"<p>ZeDMD is a \"real\" DMD designed for pinball emulations and other use cases. Originally developed by David \"Zedrummer\" Lafarge, the concept laid the foundation for what ZeDMD has become today. Markus Kalkbrenner, the current maintainer of ZeDMD, was inspired by the original idea and took the initiative to further develop and enhance it into the robust and versatile solution it is now.</p> <p>ZeDMD is or will be supported by:</p> <ul> <li>DMDExtensions</li> <li>VPX Standalone</li> <li>PPUC</li> <li>batocera</li> <li>libdmdutil</li> <li>DOF2DMD</li> <li>VPX Mobile iOS</li> <li>VPX Mobile Android</li> <li>MPF</li> </ul> <p>A full tutorial of its installation is available in English and in French</p>"},{"location":"zedmd/#which-variations-of-the-esp32-are-supported","title":"Which variations of the ESP32 are supported?","text":"<ul> <li>ESP32-S3-DevKitC-1-N16R8</li> <li>original ESP32 with CP2102 USB-to-serial converter</li> <li>original ESP32 with CH340 USB-to-serial converter</li> </ul> <p>For a new build, the ESP32 S3 is recommended. It provides more memory which is used for smoother rendering and higher color depth. And it provides a native USB interface which allows higher data transfer rates.</p>"},{"location":"zedmd/#which-led-panels-are-lcd-screens-are-supported","title":"Which LED panels are LCD screens are supported?","text":"<p>There are different LED panels on the market. But basically, ZeDMD only supports panels that could be combined to a total resolution of 128x32 (SD) or 256x64 (HD) pixels. This is the typical aspect ratio of a pinball DMD and works well as an arcade marquee. For the special need of small virtual pinball cabs, a single 128x64 panel is also supported but will display content in 128x32.</p> <p>There're different panels on the market using different driver chips. The supported ones are described at ESP32-HUB75-MatrixPanel-DMA supported panel types.</p> <p>Here is a short demo of ZeDMD and ZeDMD HD in parallel:</p> <p></p> <p>For the special need of ultra small virtual pinball cabs, the LilyGo AMOLED T-Display-S3 V2 is also supported and displays content in 128x32. One use-case is PinPal.</p>"},{"location":"zedmd/#flashing-the-firmware","title":"Flashing the firmware","text":"<p>Due to the different supported hardware configurations, there are different \"flavours\" of the ZeDMD firmware. Because the firmware pushes the cheap ESP32 to its limits, we can not provide a unified firmware, so you have to pick the appropriate one:</p> <ul> <li>ZeDMD 128x32: using two 64x32 panels driven by an ESP32 connected over USB or WiFi</li> <li>ZeDMD HD 256x64: using four 64x64 or two 128x64 panels driven by an ESP32 connected over USB or WiFi</li> <li>ZeDMD 128x64: using one 128x64 panel driven by an ESP32 connected over USB or WiFi, showing 128x32 content with an offset, suitable for mini cabinets</li> <li>ZeDMD S3 128x32: using two 64x32 panels driven by an ESP32 S3 N16R8 connected over USB CDC or WiFi</li> <li>ZeDMD S3 HD 256x64: using four 64x64 or two 128x64 panels  driven by an ESP32 S3 N16R8 connected over USB CDC or WiFi</li> <li>ZeDMD S3 128x64: using one 128x64 panel driven by an ESP32 S3 N16R8 connected over USB CDC or WiFi, showing 128x32 content with an offset, suitable for mini cabinets</li> <li>ZeDMD S3 AMOLED: using a small OLED driven by a LilyGo AMOLED T-Display-S3 V2 connected via USB CDC</li> <li>ZeDMD S3 AMOLED WiFi: using a small OLED driven by a LilyGo AMOLED T-Display-S3 V2 connected via WiFi</li> </ul> <p>There are different ways to flash the firmware on the ESP32.</p>"},{"location":"zedmd/#esptool","title":"esptool","text":"<p>Download the appropriate zip file from the latest release's assets section and extract it.</p> <p>Install esptool</p> <p>On Windows you should use <code>esptool.exe</code> instead of <code>esptool</code>. If you have different devices attached via USB or if the ESP32 is not detected you could specifiy the concrete port. For a Windows machine this could be: <pre><code>esptool.exe --chip esp32 --port COM3 write_flash 0x0 ZeDMD.bin\n</code></pre> On a unix-like system: <pre><code>esptool --chip esp32 --port /dev/ttyUSB0 write_flash 0x0 ZeDMD.bin\n</code></pre></p> <p>The ESP32-S3 N16R8 is now fully supported too. To flash this device, simply modify the command seen above by appending <code>s3</code> to <code>esp32</code>, resulting in <code>esp32s3</code>.</p>"},{"location":"zedmd/#platformio-from-source","title":"platformio (\"from source\")","text":"<pre><code>pio run -t uploadfs -e 128x32\npio run -t upload -e 128x32\n</code></pre> <p>[!WARNING]</p> <p>Starting with ZeDMD 5.1.0, we switched from platform-espressif32 to pioarduino. If you did use <code>pio</code> with older ZeDMD versions already, you must remove the <code>.pio</code> folder once or you'll get compile / upload / runtime errors: <pre><code>rm -rf .pio\n</code></pre></p>"},{"location":"zedmd/#zedmd-updater-windows-only","title":"ZeDMD Updater (Windows only)","text":"<p>Download and install the ZeDMD_Updater2 and follow its instructions.</p> <p></p>"},{"location":"zedmd/#zedmd-pinout-diagram","title":"ZeDMD pinout diagram","text":"<p>ZeDMD utilizes HUB75 to display full-color content on your panels. To achieve this, the panels must be connected to specific GPIOs on your ESP32.</p> ESP32 Dev Board ESP32-S3-N16R8 HUB75 pins GPIO 25 GPIO 4 R1 GPIO 27 GPIO 6 B1 GPIO 14 GPIO 7 R2 GPIO 13 GPIO 16 B2 GPIO 23 GPIO 18 A GPIO 5 GPIO 3 C GPIO 16 GPIO 41 CLK GPIO 15 GPIO 2 OE GPIO 26 GPIO 5 G1 GPIO 12 GPIO 15 G2 GPIO 22 GPIO 1 E GPIO 19 GPIO 8 B GPIO 17 GPIO 42 D GPIO 4 GPIO 40 LAT <p>To navigate the menu and adjust settings, you'll need to configure a few buttons. However, only two buttons are essential to modify values and exit the menu. These two buttons are <code>Menu Left</code> and <code>Value +</code>.</p> ESP32 Dev Board ESP32-S3-N16R8 Menu Button GPIO 33 GPIO 48 Menu Left NOT USED GPIO 47 Menu Right GPIO 21 GPIO 0 Value + NOT USED GPIO 45 Value -"},{"location":"zedmd/#first-start","title":"First start","text":"<p> After flashing the ZeDMD a settings menu will appear. Due to the variety of panels available on the market you will need to adjust the RGB values. On ZeDMD versions prior to v5.0.0, this can be done by pressing the RGB button. From v5.0.0 onwards, you can adjust the RGB values by navigating to the <code>RGB Order:</code> option at the top of the settings menu. Then, adjust the RGB order by rotating the colors until the following alignment is achieved:</p> <ul> <li>The top-left corner displays <code>red</code> as red.</li> <li><code>Green</code> appears as green.</li> <li><code>Blue</code> is shown as blue.</li> </ul> <p>Unique to <code>128x64</code> builds: There is an option to adjust the <code>Y offset</code> of the displayed content.</p> <p>Versions prior to V5.0.0 let you adjust the brightness using the brightness button. From v5.0.0 onwards, this is done by navigating to the <code>Brightness:</code> option in the settings menu.</p> <p>Starting from version 5.1.0, a configurable <code>USB packet size:</code> option has been introduced. While the default value works for most setups, reducing the packet size may help resolve any issues you encounter.</p> <p>The option above <code>USB packet size:</code> allows switching between <code>USB</code>, <code>SPI</code>, <code>WiFi UDP</code> and <code>WiFi TCP</code>. The USB option for the older ESP32 Dev board is self-explanatory. However, with the ESP32-S3-N16R8 you must use the left <code>USB</code> port, as shown in the picture.</p> <p></p> <p><code>SPI</code> is currently non-functional and serves only as a placeholder for future real pinball integration.</p> <p>To increase the compatibility with some USB ports or hubs, the USB package size became configurable. The default value of 32 bytes for the original ESP32 is very low. If you notice stuttering of the DMD frames, try to increase this value. Good values are 512 bytes for the original EPS32 and 1024 for the ESP32 S3. If ZeDMD doesn't work with these values, try a different USB port of your computer. In most cases not all of them and their driver chips are of the same quality.</p> <p>When wanting to use WiFi it is recommended to start with <code>WiFi UDP</code> for seamless frame streaming, provided your WiFi connection is fast. If you encounter crashes or unusual behavior, try adjusting the <code>UDP Delay:</code> option. For fast connections, a value below <code>UDP Delay: 5</code> may work well. Values like <code>UDP Delay: 4</code> have been reported to perform effectively. While lowering the UDP delay may work well for some, values above <code>UDP Delay: 5</code> should be given a try before making the final decision to switch to <code>WiFi TCP</code> for slower streaming but improved reliability.</p> <p>The <code>Debug:</code> option can be set to <code>Debug: 1</code> if requested by a ZeDMD developer to enable error tracking during testing. For regular use, this setting should always remain at <code>0</code>.</p> <p>[!WARNING]</p> <p>From version 5.0.0 onwards: once you\u2019ve finished changing values, you must navigate to the 'Exit' button. This step is required to enable the ZeDMD to enter handshake mode.</p>"},{"location":"zedmd/#advanced-settings","title":"Advanced Settings","text":"<p>ZeDMD has more configurations options than these accessible via the setting menu described above. To set these you need to use the <code>zedmd-client</code>command line tool, which is part of libzedmd, or the ZeDMD_Updater2.</p> <p><code>zedmd-client -i</code> lists the available settings and their current values: <pre><code>ZeDMD Info\n=============================================================\nID:                         799F\nfirmware version:           5.1.7\nCPU:                        ESP32 S3\nlibzedmd version:           0.9.6\ntransport:                  1 (UDP)\nIP address:                 192.168.178.61\nUSB package size:           512\nWiFi SSID:                  xxxxxxxxxxxxxxx\nWiFi port:                  3333\nWiFi UDP delay:             5\npanel width:                256\npanel height:               64\npanel RGB order:            5\npanel brightness:           10\npanel clock phase:          0\npanel i2s speed:            8\npanel latch blanking:       2\npanel minimal refresh rate: 30\npanel driver:               0\nY-offset:                   0\n</code></pre></p> <p>Some of these values could be adjusted, run <code>zedmd-client -h</code> to see a list of all adjustable settings and how to do it. Here are explanations for some of the advanced options:</p> Setting Values Explanation debug 0,1 Display some debug information on the DMD while it is un use. panel clock phase 0,1 Default is 1 (on), see Clock Phase panel drive 0(SHIFTREG), 1(FM6124), 2(FM6126A), 3(ICN2038S), 4(MBI5124), 5(SM5266P), 6(DP3246_SM5368) Default is 0(SHIFTREG), see Specific chips found to work panel i2s speed 8, 16, 20 The frequency used to transfer the data to the panel driver, default is 8Mhz. It might need to be changed in case a \"non-standard\" driver chip is used in your panels panel latch blanking 0, 1, 2, 3, 4 Default is 2, see Latch Blanking panel min refresh rate 30..120 The refresh rate used to update panels. A higher value leads to smoother animations and less lag. But too high values lead to errors, especially if large areas of the DMD change frequently. The default of 30Hz is very low. Try to increase it. 60Hz is a good value for ZeDMD HD, 90Hz for ZeDMD. transport 0(USB), 1(WiFi UDP), 2(WiFi TCP), 3(SPI) 0(USB) is the default. In WiFi mode you can choose between 1(UDP) and 2(TCP). UDP is a faster and preferable but could lead artifacts or restarts of ZeDMD if the WiFi quality is not good. TCP ensures that everything is displayed, but could lead to stuttering and sometimes frame drops if the WiFi quality is not good. SPI is meant for futitre use in real pinball machines. UDP delay 0..9 A delay of milliseconds beten UDP packages. A higher value reduces the risk of artifactsor restarts but add a bit of a lag. Default is 5ms. USB package size 32..1920 (step 32) The amount of bytes sent per data package via USB. A higher value leads to smoother animations and less lag. The default of 32 is very low. Good values are 512 bytes for the original EPS32 and 1024 for the ESP32 S3. But the highest possible value depend on a lot of factors like USB chipset, cable quality, etc. WiFi port The network port to be used to stream frames to ZeDMD via WiFi. The default is 3333. Only change this value in case this port is already in use in your network or blocked by a firewall. <p>[!WARNING] The most important values you should adjust even if ZeDMD works are the panel min refresh rate and, in case of USB, the USB package size. Both are also easlilyajustable in the settings menu! Otherwise your ZeDMD will work, but not as good as it could.</p>"},{"location":"zedmd/#zedmd-wifi","title":"ZeDMD-WiFi","text":"<p>After activating either <code>WiFi UDP</code> or <code>WiFi TCP</code> in the settings menu, connect your mobile device or laptop to the <code>ZeDMD-WiFi</code> network using password <code>zedmd1234</code>. Then, open your web browser and navigate to http://ZeDMD-WiFi.local (IP: 192.168.4.1) to access the configuration settings.</p>"},{"location":"zedmd/#important-legal-notices","title":"IMPORTANT LEGAL NOTICES:","text":"<p>ZeDMD's firmware is open source and licensed as GPLv2 or later and can be ditributed under these terms.</p> <p>For manufacturers or resellers of any shield, frame, ready-to-use devices or whatever linked to ZeDMD, our only request is that the device is called as \"ZeDMD something\" or powered by ZeDMD. \"ZeDMD\" should be what you see first when you look at the device. Also, a link to this project must be provided with the device.</p> <p>ZeDMD uses</p> <ul> <li>ESP32-HUB75-MatrixPanel-DMA</li> <li>Bounce2</li> <li>miniz</li> <li>Tiny 4x6 Pixel Font</li> <li>ESPAsyncWebServer</li> <li>TFT_eSPI</li> <li>RM67162 with fixes from Nikthefix</li> <li>pioarduino</li> </ul>"},{"location":"zedmd/#faq","title":"FAQ","text":""},{"location":"zedmd/#where-can-i-buy-a-zedmd","title":"\"Where can I buy a ZeDMD?\"","text":"<p>[!WARNING] Neither @Zedrummer - David Lfg, nor myself are earning any money from ZeDMD and we don't get money from the sellers listed on https://ppuc.org/ZeDMD I just listed these shops to make it easier for you to get started with ZeDMD. ZeDMD is and will remain a free open source DIY project!</p> <p>The intention of ZeDMD is to provide a cheap DIY DMD solution. The maintainers of this project don't run any shop to sell ready-to-use hardware!</p> <p>Nevertheless, there are are some shops we are aware of who designed their own shields to build a ZeDMD. And as this might ease the task to use a ZeDMD for some users, we agreed to add some links here:</p> <ul> <li>https://janspinballmods.com/mods/zedmd/shield-esp32-s3/</li> <li>https://shop.arnoz.com/en/dmd/87-esp-dmd-shield.html</li> <li>https://benfactory.fr/produit/zedmd-shield/</li> <li>https://www.smallcab.net/shield-zedmd-p-2697.html</li> </ul> <p>There are also ready-to-use devices:</p> <ul> <li>https://janspinballmods.com/mods/zedmd/zedmd-s3-128x32-plug-and-play/</li> <li>https://benfactory.fr/produit/zedmd/</li> <li>https://www.smallcab.net/pack-zedmd-p-2698.html</li> <li>https://virtuapin.net/index.php?main_page=product_info&amp;cPath=6&amp;products_id=283</li> </ul>"},{"location":"zedmd/#my-led-panels-do-not-work-ghosting-wrong-pixels-missing-lines","title":"My LED panels do not work; ghosting, wrong pixels, missing lines","text":"<p>The ZeDMD firmware supports a wide range of LED panels with different driver chips ... in theory. In general, some driver chips require adjustments in the configuration, timings and the clock phase. That can be done with ZeDMD_Updater2 for Windows, or the <code>zedmd-client</code> which is available for every operating system as part of the libzedmd download: https://github.com/PPUC/libzedmd/releases</p> <p>Here is some background information:</p> <ul> <li>https://github.com/mrcodetastic/ESP32-HUB75-MatrixPanel-DMA?tab=readme-ov-file#supported-panel-can-types</li> <li>https://github.com/mrcodetastic/ESP32-HUB75-MatrixPanel-DMA?tab=readme-ov-file#latch-blanking</li> </ul> <p>Thes available config options are decribed above in Advanced Settings.</p> <p>The pre-built firmware uses the default config which is suitable for the most common LED panels. Obviously we can't provide a menu on the device to adjust these settings as you won't see them ;-)</p> <p>We would love to list the required settings for specific panels here. But that would require someone to send over their panels to us so we can find out the correct config.</p> <p>If you find out what config adjustment gets a specific panel to work, you should open an issue here and provide that information so that we could include it in the README.</p>"},{"location":"zedmd/#i-have-installed-all-of-the-latest-files-but-i-still-get-crashes-on-a-windows-machine","title":"I have installed all of the latest files, but I still get crashes on a Windows machine","text":"<p>A few users have reported that VPX and ZeDMD consistently crash if the latest Visual C++ Redistributable Runtime packages are not installed. To resolve this issue, ensure you have the most up-to-date runtime packages installed. If the latest version doesn\u2019t resolve the issue, it may be necessary to install all available versions of the Visual C++ Redistributable Runtime packages.</p> <p>Another potential issue could be outdated USB drivers. For the original ESP32 Development Board:</p> <ul> <li>https://www.silabs.com/developer-tools/usb-to-uart-bridge-vcp-drivers?tab=downloads</li> </ul> <p>For the ESP32-S3-N16R8, we use the USB CDC port, which doesn't require a driver.</p>"},{"location":"zedmd/#zedmd-crashed-how-can-i-help-to-fix-the-issue","title":"ZeDMD crashed, how can I help to fix the issue","text":"<p>If you discover a crash, there's a good chance that a coredump has been written to the internal flash memory. Especially if ZeDMD actively tells you to do so! If you install the entire esp-idf, you can extract and interpret the coredump. <code>firmware.elf</code> is included in the release downloads since v5.1.2. To get the coredump, the command has to be something like this on Linux or macOS: <pre><code>python PATH_TO_ESP_IDF/esp-idf/components/espcoredump/espcoredump.py info_corefile PATH_TO_FIRMWARE_ELF/firmware.elf\n</code></pre> Or on Windows: <pre><code>PATH_TO_PYTHON\\python.exe PATH_TO_ESP_IDF\\esp-idf\\components\\espcoredump\\espcoredump.py info_corefile PATH_TO_FIRMWARE_ELF\\firmware.elf\n</code></pre></p> <p>If you used pio to build and flash the firmware, the command line on Linux or macOS could be like this: <pre><code>python ~/esp/v5.3.2/esp-idf/components/espcoredump/espcoredump.py info_corefile .pio/build/S3-N16R8_128x32/firmware.elf\n</code></pre></p>"},{"location":"zedmd/#can-i-use-zedmd-with-mpf","title":"Can I use ZeDMD with MPF","text":"<p>Yes! A native MPF driver is under development. See libzedmd-python-pybind11-extension.</p>"},{"location":"zedmd/#my-esp32-s3-n16r8-zedmd-is-not-bootinggetting-black-screen","title":"My ESP32-S3-N16R8 ZeDMD is not booting/getting black screen","text":"<p>Unfortunately a lot of ESP32-S3-N16R8's that are currently being made feature an unintended capacitor near the \"BOOT\" button. Whenever the device is powered through USB or external power and the mini capacitor next to the \"BOOT\" button is present, the S3 device will not boot correctly, and often needs a manual reset for it to work.</p> <p>Of course, this is not the behaviour which we expect out of the ESP32-S3-N16R8.</p> <p>If the capacitor next to the boot button is present on your S3, the fix is to simply destroy it. Please have a look at THIS video.</p> <p>Something missing or wrong? You can fix it!</p> <p>This website is edited by people like you! Is something wrong or missing? Is something out of date, or can you explain it better?</p> <p>Please help us! You can fix it yourself and be an official \"open source\" contributor!</p> <p>It's easy! See our Beginner's guide to editing the docs.</p> Page navigation via the keyboard: &lt; &gt; <p>You can navigate this site via the keyboard. There are two modes:</p> <p>General navigation, when search is not focused:</p> <ul> <li>F , S , / : open search dialog</li> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>While using the search function:</p> <ul> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search</li> <li>Enter : go to highlighted page in the results</li> </ul>"}]}